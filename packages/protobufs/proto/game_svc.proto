syntax = "proto3";

enum GameOutcome {
  WHITE_WINS = 0;
  BLACK_WINS = 1;
  TIE = 2;
  KEEP_PLAYING = 3;
}

message GameSettingsMsg {
  optional uint32 time = 1;
  optional uint32 increment = 2;
}

message GameStateMsg {
  string fen = 1;
  repeated string moveSans = 2;
  GameOutcome outcome = 3;
  optional uint32 timeLeftWhite = 4;
  optional uint32 timeLeftBlack = 5;
  optional string drawAskedBy = 6;
}

message CreateGameRequest {
  string whitePlayerId = 1;
  string blackPlayerId = 2;
  GameSettingsMsg settings = 3;
}

message GameIdMsg {
  string gameId = 1;
}

message GetGameInfoResponse {
  string whitePlayerId = 1;
  string blackPlayerId = 2;
  GameSettingsMsg settings = 3;
  GameStateMsg state = 4;
  optional string whitePlayerUsername = 5;
  optional string blackPlayerUsername = 6;  
  uint32 updatedAt = 7;
}

message MakeMoveRequest {
  string gameId = 1;
  string playerId = 2;
  string san = 3;
}

message GameUpdateMsg {
  string gameId = 1;
  string san = 2;
  string updatedFen = 3;
  GameOutcome updatedOutcome = 4;
  optional uint32 updatedTimeLeft = 5;
  uint32 updatedAt = 6;
}

message DrawRequest {
  string gameId = 1;
  string playerId = 2;
}

message DrawResponse {
  string gameId = 1;
  string drawRequesterId = 2;
}

message ForfeitRequest {
  string gameId = 1;
  string playerId = 2;
}

service GameService {
  rpc CreateGame(CreateGameRequest) returns (GameIdMsg) {}
  rpc MakeMove(MakeMoveRequest) returns (GameUpdateMsg) {}
  rpc GetGameInfo(GameIdMsg) returns (GetGameInfoResponse) {}
  rpc Draw(DrawRequest) returns (DrawResponse) {}
  rpc Forfeit(ForfeitRequest) returns (GameUpdateMsg) {}
}
